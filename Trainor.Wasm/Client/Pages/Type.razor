@page "/fetchresources/type"
@using Microsoft.AspNetCore.Authorization
@using Trainor.Storage.Entities
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Trainor.Wasm.Shared
@using System.Net
@using Microsoft.Extensions.Logging
@using Trainor.Storage;
@inject HttpClient Http

<h1>Hej</h1>

<p>This component demonstrates fetching type from the server.</p>


@if (_typeResources == null)
{
    <p><em>Loading by type...</em></p>

}
else
{
    <table class="table">
        <thead>
        <tr>
            <th></th>
            <th></th>
            <th></th>
            <th></th>
        </tr>
        </thead>
        <tbody>
        @foreach (var resource in _typeResources)
        {
            <tr>
                <td>@resource.id</td>
                <td>@resource.link</td>
            </tr>
        }
        </tbody>
    </table>
}
<button class="searchButton" @onclick="SetParamType">Initialize search by type</button>

@if (_subjectResources == null)
{
    <p><em>Loading by subject...</em></p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th></th>
            <th></th>
            <th></th>
            <th></th>
        </tr>
        </thead>
        <tbody>
        @foreach (var resource in _subjectResources)
        {
            <tr>
                <td>@resource.id</td>
                <td>@resource.link</td>
            </tr>
        }
        </tbody>
    </table>
}
<button class="searchButton" @onclick="SetParamSubject">Initialize search by subject</button>

@code 
{
    private List<ResourceDto>? _typeResources;
    private List<ResourceDto>? _subjectResources;
    protected override async Task OnParametersSetAsync()
    {
        if (TypeString != null)
        {
            _typeResources = await Http.GetFromJsonAsync<List<ResourceDto>>($"Resource/{TypeString}");
        } 
        else if (SubjectSearchString != null)
        {
            _subjectResources = await Http.GetFromJsonAsync<List<ResourceDto>>($"Resource/bysubject?{SubjectSearchString}");
        }
        await base.OnParametersSetAsync();
    }
}

@code 
{
    [Parameter] 
    public string? TypeString { get; set; }
    private async void SetParamType()
    {
        TypeString = "type";
        await OnParametersSetAsync();
    }
}

@code 
{
    [Parameter] 
    public string? SubjectSearchString { get; set; }
    private async void SetParamSubject()
    {
        string[] inputArray = new[]
        {
            "hello",
            "i'm",
            "a",
            "stringarray"
        };
        SubjectSearchString = inputArray.ToQueryString();
        await OnParametersSetAsync();
    }
}
