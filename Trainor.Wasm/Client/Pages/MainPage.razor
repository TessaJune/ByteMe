@using Trainor.Storage
@using Trainor.Storage.Entities
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject NavigationManager NavigationManager
@inject SignOutSessionStateManager SignOutManager
@inject HttpClient Http

@page "/mainpage"

<style>
    @@import url('https://fonts.googleapis.com/css2?family=IBM+Plex+Sans&display=swap');
</style>

<!DOCTYPE html>
<html>
<body>
    <div class="container">
        <div class="filterDiv">
            <div class="filterCheckBoxesDiv">
                <div class="filterTitle">
                    <p class="title">Filter through resources</p>
                </div>


                <div id="filters">
                    <p id="fTitle">TypeTag</p>
                    <div class="filterCheckBox">

                        <input type="checkbox" id="filterbox" name="filterOne" @onclick="@(() => AddFilter("Video"))" value="Filter">
                        <label for="filterOne">Video</label><br><br> 
                      
                        <input type="checkbox" id="filterbox" name="filterOne" @onclick="@(() => AddFilter("Document"))" value="Filter">
                        <label for="filterOne">Document</label><br><br> 

                        <input type="checkbox" id="filterbox" name="filterOne" @onclick="@(() => AddFilter("Article"))" value="Filter">
                        <label for="filterOne">Article</label><br><br>

                        <input type="checkbox" id="filterbox" name="filterOne" @onclick="@(() => AddFilter("PDF"))" value="Filter">
                        <label for="filterOne">PDF</label><br>
                    </div>
                </div>

                <div id="filters">
                    <p id="fTitle">SubjectTag</p>
                    <div class="filterCheckBox">
                        @* Filter 2.1 *@

                        <input type="checkbox" id="filterbox" name="filterOne" @onclick="@(() => AddFilter("C#"))" value="Filter">
                        <label for="filterOne"> C#</label><br><br>

                        @* Filter 2.2 *@
                        <input type="checkbox" id="filterbox" name="filterOne" @onclick="@(() => AddFilter("Java"))" value="Filter">
                        <label for="filterOne">Java</label><br><br>

                        @* Filter 2.3 *@
                        <input type="checkbox" id="filterbox" name="filterOne" @onclick="@(() => AddFilter("GoLang"))" value="Filter">
                        <label for="filterOne">GoLang</label><br><br>

                        <input type="checkbox" id="filterbox" name="filterOne" @onclick="@(() => AddFilter("SQL"))" value="Filter">
                        <label for="filterOne">SQL</label><br><br>

                        <input type="checkbox" id="filterbox" name="filterOne" @onclick="@(() => AddFilter("HTML"))" value="Filter">
                        <label for="filterOne">HTML</label><br><br>

                        <input type="checkbox" id="filterbox" name="filterOne" @onclick="@(() => AddFilter("CSS"))" value="Filter">
                        <label for="filterOne">CSS</label><br><br>
                    </div>
                </div>

            </div>
            <div class="signOutDiv">
                <input class ="imageSignOut" type = "image" src="images/signOutWhite.png" @onclick="BeginLogout"/>
                <div class ="imageSignOutText">                                
                    <p>Sign out</p>
                </div>
            </div>
        </div>
        
        <div class="resourceDiv">
            <div class="searchbarDiv">
                <div class="inputField"> 
                    <div class="magnifyingGlassDiv">
                        <img class ="magnifyingGlass" src="images/magnifyingGlass.png" alt="Image is not showing"/>
                    </div>
                    <div class="inputText">
                        <input class="input" type="text">
                    </div>
                </div>
                <div class="buttonDiv">
                    <input class = "searchButton" type = "image" src = "images/searchButton.png">
                </div>
            </div>
            <div class="allResources">
                @if (_searchResults== null)
                {
                    <p><em>Loading...</em></p>
                }
                else
                {
                    <table class="table">
                        <thead>
                        <tr>
                            <th></th>
                            <th></th>
                            <th></th>
                            <th></th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (var resource in _searchResults)
                        {
                            <tr>
                                <td>@resource.id</td>
                                <td>@resource.link</td>
                                 @* <h2>Resource name</h2>
                                    <p>Resource description</p> *@
                            </tr>
                        }
                        </tbody>
                    </table>
                }
            </div>
        </div>
        <div class="placeholderDiv"></div>
    </div>
</body>
</html>


@code 
{
    protected override async Task OnInitializedAsync()

    {
        try
        {
            _searchResults = await Http.GetFromJsonAsync<IReadOnlyCollection<ResourceDto>>("Search");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
}

@code 
{
    private List<string> filters = new List<string>();
    private IReadOnlyCollection<ResourceDto> _searchResults;

    protected override async Task OnParametersSetAsync()
    {
        if (Filters != null)
        {
            _searchResults = await Http.GetFromJsonAsync<List<ResourceDto>>($"Search/filtered?{Filters}");
        }
        await base.OnParametersSetAsync();
    }
}

@code {
    [Parameter]
    public string? Filters { get; set; }
    private async void AddFilter(string filter)
    {
        if (!filters.Contains(filter))
        {
            filters.Add(filter);
        }
        else
        {
            filters.Remove(filter);
        }
        var filtersArray = filters.ToArray();
        Filters = filtersArray.ToFilterQueryString();
        await OnParametersSetAsync();
    }
}

@code {    
    @* Making it possible to navigate to loginPage *@
    public void NavigateToLoginPage()
    {
        NavigationManager.NavigateTo("/");
    }

@code{
    private async Task BeginLogout(MouseEventArgs args)
    {
        await SignOutManager.SetSignOutState();
        NavigationManager.NavigateTo("/");
        
    }
}
}