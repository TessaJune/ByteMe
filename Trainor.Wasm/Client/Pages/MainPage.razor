@using Trainor.Storage
@using Trainor.Storage.Entities
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject NavigationManager NavigationManager
@inject SignOutSessionStateManager SignOutManager
@inject HttpClient Http

@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@page "/mainpage"

<style>
    @@import url('https://fonts.googleapis.com/css2?family=IBM+Plex+Sans&display=swap');
</style>

<!DOCTYPE html>
<html>

<body>
    <div class="container">
        <div class="filterDiv">
            <div class="filterCheckBoxesDiv">
                <div class="filterTitle">
                    <p class="title">Filter through resources</p>
                </div>


                <div id="filters">
                    <p id="fTitle">TypeTag</p>
                    <div class="filterCheckBox">

                        <input type="checkbox" id="filterbox" name="filterOne" @onclick="@(() => { AddFilter("Video"); })" @bind="@_filterBools[0]" value="Filter">
                        <label for="filterOne">Video</label><br><br> 

                        <input type="checkbox" id="filterbox" name="filterOne"
                            @onclick="@(() => { AddFilter("Document"); })" @bind="@_filterBools[1]" value="Filter">
                        <label for="filterOne">Document</label><br><br>

                        <input type="checkbox" id="filterbox" name="filterOne"
                            @onclick="@(() => { AddFilter("Article"); })" @bind="@_filterBools[2]" value="Filter">
                        <label for="filterOne">Article</label><br><br>

                        <input type="checkbox" id="filterbox" name="filterOne" @onclick="@(() => { AddFilter("PDF"); })"
                            @bind="@_filterBools[3]" value="Filter">
                        <label for="filterOne">PDF</label><br>
                    </div>
                </div>

                <div id="filters">
                    <p id="fTitle">SubjectTag</p>
                    <div class="filterCheckBox">



                        <input type="checkbox" id="filterbox" name="filterOne" @onclick="@(() => { AddFilter("C#"); })" @bind="@_filterBools[4]" value="Filter">
                        <label for="filterOne"> C#</label><br><br>

                        <input type="checkbox" id="filterbox" name="filterOne"
                            @onclick="@(() => { AddFilter("Java"); })" @bind="@_filterBools[5]" value="Filter">
                        <label for="filterOne">Java</label><br><br>

                        <input type="checkbox" id="filterbox" name="filterOne"
                            @onclick="@(() => { AddFilter("GoLang"); })" @bind="@_filterBools[6]" value="Filter">
                        <label for="filterOne">GoLang</label><br><br>

                        <input type="checkbox" id="filterbox" name="filterOne" @onclick="@(() => { AddFilter("SQL"); })"
                            @bind="@_filterBools[7]" value="Filter">
                        <label for="filterOne">SQL</label><br><br>

                        <input type="checkbox" id="filterbox" name="filterOne"
                            @onclick="@(() => { AddFilter("HTML"); })" @bind="@_filterBools[8]" value="Filter">
                        <label for="filterOne">HTML</label><br><br>


                        <input type="checkbox" id="filterbox" name="filterOne" @onclick="@(() => { AddFilter("CSS"); })" 
                              @bind="@_filterBools[9]" value="Filter">
                        <label for="filterOne">CSS</label><br><br>
                    </div>
                    <div class="filterButtonDiv">
                        <button class="filterButton" @onclick="@(() => RefreshResources(_searchResults))">Filtered
                            search</button>
                    </div>
                </div>
            </div>
            <div class="signOutDiv">    
                <input class="imageSignOut" type="image" src="images/signOutWhite.png" @onclick="BeginLogout" />
                <div class="imageSignOutText">
                    <button class="imageSignOutButton" type="button" @onclick="BeginLogout">Sign out</button>
                </div>
            </div>
        </div>

        <div class="resourceDiv">
            <div class="searchbarDiv">
                <div class="inputField">
                    <div class="magnifyingGlassDiv">
                        <img class="magnifyingGlass" src="images/magnifyingGlass.png" alt="Image is not showing" />
                    </div>
                    <div class="inputText">
                        <input class="input" type="text" value="@_keywords" @oninput="(EventArgs) => SetKeywords(EventArgs.Value.ToString())"/>
                    </div>
                </div>
                <div class="buttonDiv">

                    <input class = "searchButton" type = "image" src = "images/searchButton.png" @onclick="SearchByKeyword">

                </div>
            </div>
            <div class="resetButtonDiv">
                <button class="resetButton" @onclick="OnInitializedAsync">Reset search</button>
            </div>
            <div class="allResources">
                @if (_searchResults == null)
                {
                    <p><em>Loading...</em></p>
                }
                else
                {
                    <table class="table">
                        <thead>
                            <tr>
                                <th></th>
                                <th></th>
                                <th></th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var resource in SearchResults)
                            {
                                int i = 0;
                                <div class="resourceContainer">
                                    <div class="tableDiv">
                                        <div class="tableHeader">
                                            @if (resource.name == null)
                                            {
                                                <h2><em>Missing title</em></h2>        
                                            }
                                            <h2>@resource.name</h2>
                                        </div>
                                        <div class="arrowDown">
                                            <input class="imageArrow" alt="picture is not showing" type="image" src=@imagePath @onclick="ChangeImage"/>
                                        </div>
                                    </div>
                                    @if (ExtendDiv == true)
                                    {
                                        <div class="linkDiv">
                                            <button class="buttonLink" type="button" @onclick="() => NavigateToLink(resource.link)">Link: @resource.link </button>
                                        </div>
                                        <div class="resourceDescription">
                                        <div id="Resource">
                                           @if (resource.authors == null)
                                            {
                                               <p>Author(s): No authors</p>
                                            } else {
                                                <p>Author(s): @resource.authors</p>
                                            }
                                        </div>
                                        <div id="Resource">
                                            @if (resource.subjects == null)
                                            {
                                               <p>Subject(s): No subjects</p>
                                            } else {
                                                <p>Subject(s): @resource.subjects</p>
                                            }
                                        </div>
                                        <div id="Resource">
                                            @if (resource.types == null)
                                            {
                                               <p>Types(s): No types</p>
                                            } else {
                                                <p>Types(s): @resource.types</p>
                                            }
                                        </div>
                                    </div>
                                    }
                                    else
                                    {
                                        <div class="resourceDescription">
                                            <div id="Resource">
                                                @if (resource.authors == null)
                                                {
                                                <p>Author(s): No authors</p>
                                                } else {
                                                    <p>Author(s): @resource.authors</p>
                                            }
                                            </div>
                                            <div id="Resource">
                                                @if (resource.subjects == null)
                                                {   
                                                <p>Subject(s): No subjects</p>
                                                } else {
                                                    <p>Subject(s): @resource.subjects</p>
                                            }
                                            </div>
                                            <div id="Resource">
                                            @if (resource.types == null)
                                            {
                                               <p>Types(s): No types</p>
                                            } else {
                                                <p>Types(s): @resource.types</p>
                                            }
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                        </tbody>
                    </table>
                }
            </div>
        </div>
        <div class="placeholderDiv"></div>
    </div>
</body>

</html>


@code
{
    string imagePath;
    private bool ExtendDiv;
    private List<string> _filters;
    private bool[] _filterBools;
    private IReadOnlyCollection<ResourceDto> _searchResults;
    public IReadOnlyCollection<ResourceDto> SearchResults;
    private string[] filtersArray;
    public string? Filters { get; set; }
    public string? Keywords { get; set; }
    public string _keywords = "";

    protected override async Task OnInitializedAsync()
    {
        imagePath = "images/sideArrow.png";
        
        try
        {
            _keywords = "";
            _filters = new List<string>();
            _filterBools = new bool[10];
            _searchResults = await Http.GetFromJsonAsync<IReadOnlyCollection<ResourceDto>>("Search/micro");
            RefreshResources(_searchResults);
            AddFilter("");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async void AddFilter(string filter)
    {

        if (!_filters.Contains(filter))
        {
            _filters.Add(filter);
        }
        else
        {
            _filters.Remove(filter);
        }
        _keywords = "";
        filtersArray = _filters.ToArray();
        Filters = filtersArray.ToFilterQueryString();
        _searchResults = await Http.GetFromJsonAsync<List<ResourceDto>>($"Search/{Filters}");
    }

    public void NavigateToLoginPage()
    {
        NavigationManager.NavigateTo("/");
    }

    public void RefreshResources(IReadOnlyCollection<ResourceDto> resources)
    {
        SearchResults = null;

        SearchResults = resources;
    }

    private async Task BeginLogout(MouseEventArgs args)
    {
        await SignOutManager.SetSignOutState();
        NavigationManager.NavigateTo("authentication/logout");
    }

    private async Task SetKeywords(string value)
    {
        _keywords = value;
        _searchResults = await Http.GetFromJsonAsync<List<ResourceDto>>($"Search/{_keywords}");
    }

    private async Task SearchByKeyword()
    {
        _keywords = "";
        _filters = new List<string>();
        _filterBools = new bool[10];
        _searchResults = await Http.GetFromJsonAsync<List<ResourceDto>>($"Search/{_keywords}");
        RefreshResources(_searchResults);
    }

    private void changeImage(){
    

        if (imagePath == "images/sideArrow.png") 
        {
            imagePath = "images/downArrow.png";
        }
        else
        {
            imagePath = "images/sideArrow.png";
        }
        ExtendDivider();
    }

    public void ExtendDivider()
    {
        if (ExtendDiv == false)
        {
            ExtendDiv = true;
        }
        else
        {
            ExtendDiv = false;
        }
    }

    public void NavigateToLink(string link) 
    {
        NavigationManager.NavigateTo(link);
    }
}
